contract smartcrate
{
    uint public value;
    address public seller;
    address public buyer;
    address public transporter;
    enum State { Created, Locked, Inactive }
    State public state;

    /// Create invoice from buyer to seller and transporter
    /// `msg.value / 10` dinero.
    function Purchase()
        require(msg.value % 10 == 0)
    {
        buyer = msg.sender;
        value = msg.value / 10;
    }

    modifier require(bool _condition)
    {
        if (!_condition) throw;
        _
    }
    modifier onlyBuyer()
    {
        if (msg.sender != buyer) throw;
        _
    }
    modifier onlySeller()
    {
        if (msg.sender != seller) throw;
        _
    }
    modifier onlyTransporter()
    {
        if (msg.sender != transporter) throw;
        _
    }
    modifier inState(State _state)
    {
        if (state != _state) throw;
        _
    }

    event Aborted();
    event PurchaseConfirmed();
    event ItemDelivered();
    event ItemReceived();
    event Refunded();

    /// If the product is not dank - determined by transporter
    /// or if product is never given to transporter
    /// abort the entire smart contract from inception
    /// buyer is refunded complete escrow
    function abort()
        onlyBuyer
        inState(State.Created)
    {
        buyer.send(this.balance);
        state = State.Inactive;
        Aborted();
    }
    /// Confirm the purchase as agreed upon by both seller and transporter.
    /// Transaction has to include `10 * value` dinero.
    /// Ether is in escrow until 1st event:
    /// confirmReceived is called by the transporter
    /// and then again at 2nd event:
    /// confirmRecieved is called by the buyer
    /// or refund is called by the buyer.
    function confirmPurchase()
        inState(State.Created)
        require(msg.value == 10 * value)
    {
        seller = msg.sender;
        transporter = msg.sender;
        state = State.Locked;
        PurchaseConfirmed();
    }
    /// At the first point, seller confirms dropoff of tomatoes
    /// Hereby releasing them of their selling duties
    /// thus also releasing funds from escrow to them - 8 dinero
    function confirmReceived1()
        onlySeller
        inState(State.Locked)
    {
        seller.send(value); 
        buyer.send(this.balance);
        state = State.Inactive;
        ItemReceived();
    }
    function confirmReceived2()
        onlyTransporter
        inState(State.Locked)
    {
        transporter.send(value); 
        buyer.send(this.balance);
        state = State.Inactive;
        ItemReceived();
    }
    /// Because this escrow goes through several parties, 
    /// refunding can happen at several points although still pulling from escrow
    /// the refund can happen before any dropoff
    /// there can also be a refund at point of transporter to buyer
    function refund1()
        onlyBuyer
        inState(State.Locked)
    {
        seller.send(8 * value); 
        buyer.send(this.balance);
        state = State.Inactive;
        Refunded();
    }
     function refund2()
        onlyTransporter
        inState(State.Locked)
    {
        seller.send(2 * value); 
        transporter.send(this.balance);
        state = State.Inactive;
        Refunded();
    }
    function() { throw; }
}
